Singly and Doubly Linked List

A singly linked list is a sequential list of nodes that holds data of the next node also containing data
data -> data -> data -> null

Used in many List, Queue & Stack Implementation
Great for creating circular lists
model real world objects
Used in seperate chaining - certain hashtable Implementations to deal with hashing collision
Used in adjacent lists for graphs


Head - The first node in a linked list
Tail - The last node in a linked List
Pointer - Reference to another node
Node - An object containing data and pointer(s)

Singly vs Doubly linked lists

Singly linked lists only hold a reference to the next node. In the Implementation you always maintain
a reference to the head to the linked list and a reference to the tail node for quick additions/removals

With a doubly linked list each node holds a reference to the next and previous node. In the Implementation 
you always maintain a reference to the head and the tail of the doubly linked list to do
quick additions/removals from both ends of the list

Singly & Doubly Linked Lists
Singly Linked List  - Use less memory, Simpler Implementation --------- Cannot easily access previous element   
Doubly Linked List - Can be traversed backwards ------ Takes 2x memory

